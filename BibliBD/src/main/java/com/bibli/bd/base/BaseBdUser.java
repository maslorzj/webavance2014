package com.bibli.bd.base;

import java.io.Serializable;

import org.json.JSONException;
import org.json.JSONObject;


/**
 * This class has been automatically generated by Hibernate Synchronizer.
 * For more information or documentation, visit The Hibernate Synchronizer page
 * at http://www.binamics.com/hibernatesync or contact Joe Hudson at joe@binamics.com.
 *
 * This is an object that contains data related to the bd_user table.
 * Do not modify this class because it will be overwritten if the configuration file
 * related to this class is modified.
 *
 * @hibernate.class
 *  table="bd_user"
 */
public abstract class BaseBdUser  implements Serializable {



	private int hashCode = Integer.MIN_VALUE;

	// primary key
	private com.bibli.bd.Bd _bd;
	private com.bibli.bd.User _user;


	// constructors
	public BaseBdUser () {
		initialize();
	}

	/**
	 * Constructor for primary key
	 */
	public BaseBdUser (
		com.bibli.bd.Bd _bd,
		com.bibli.bd.User _user) {

		this.setBd(_bd);
		this.setUser(_user);
		initialize();
	}

	protected void initialize () {}



	/**
     * @hibernate.property
     *  column=bdId
	 * not-null=true
	 */
	public com.bibli.bd.Bd getBd () {
		return this._bd;
	}

	/**
	 * Set the value related to the column: bdId
	 * @param _bd the bdId value
	 */
	public void setBd (com.bibli.bd.Bd _bd) {
		this._bd = _bd;
		this.hashCode = Integer.MIN_VALUE;
	}

	/**
     * @hibernate.property
     *  column=userId
	 * not-null=true
	 */
	public com.bibli.bd.User getUser () {
		return this._user;
	}

	/**
	 * Set the value related to the column: userId
	 * @param _user the userId value
	 */
	public void setUser (com.bibli.bd.User _user) {
		this._user = _user;
		this.hashCode = Integer.MIN_VALUE;
	}


	public boolean equals (Object obj) {
		if (null == obj) return false;
		if (!(obj instanceof com.bibli.bd.BdUser)) return false;
		else {
			com.bibli.bd.BdUser mObj = (com.bibli.bd.BdUser) obj;
			if (null != this.getBd() && null != mObj.getBd()) {
				if (!this.getBd().equals(mObj.getBd())) {
					return false;
				}
			}
			else {
				return false;
			}
			if (null != this.getUser() && null != mObj.getUser()) {
				if (!this.getUser().equals(mObj.getUser())) {
					return false;
				}
			}
			else {
				return false;
			}
			return true;
		}
	}


	public int hashCode () {
		if (Integer.MIN_VALUE == this.hashCode) {
			StringBuffer sb = new StringBuffer();
			if (null != this.getBd()) {
				sb.append(this.getBd().hashCode());
				sb.append(":");
			}
			else {
				return super.hashCode();
			}
			if (null != this.getUser()) {
				sb.append(this.getUser().hashCode());
				sb.append(":");
			}
			else {
				return super.hashCode();
			}
			this.hashCode = sb.toString().hashCode();
		}
		return this.hashCode;
	}


	public String toString () {
		return super.toString();
	}
	
	public JSONObject toJSON() throws JSONException {
		JSONObject JSONBdUser = new JSONObject();
		JSONBdUser.put("bd", this.getBd().toJSON());
		JSONBdUser.put("user", this.getUser().toJSON());
		
		return JSONBdUser;
	}

}